
Assignment 2 :- 

/*
 Display the list of products (Id, Title, Count of Categories) which fall in more than one Categories.
*/
1.	SELECT product.ProductId AS "Product Id" , product.ProductName AS "Product Name" , COUNT(categoryId.CategoryId) 
		AS "Count Of Category" FROM product 

		INNER JOIN categoryId ON product.ProductId = categoryId.ProductId 
		GROUP BY categoryId.ProductId HAVING COUNT(categoryId.productId) > 1 ;



/*
Display Count of products as per below price range:
*/
2.	SELECT Price AS "Price", count(*) AS "No of Products" 
FROM 
		(SELECT CASE
 
			WHEN product.Price >= 0 AND product.Price <= 1000 THEN '0-1000'
                
			WHEN product.Price >= 10001 AND product.Price <= 50000 THEN '1001-5000'
                
			ELSE 'Above 5000'
            
			END AS price
      
			FROM product) 
		AS CountOfProducts
		GROUP BY price;



/*
Display the Categories along with number of products under each category.
*/
3.	SELECT category.CategoryId AS "Id" , category.CategoryName AS "Category Name",COUNT(categoryid.productId) 
	AS "No Of Products" 
FROM 
	category INNER JOIN categoryid ON
	
	category.CategoryId = categoryid.CategoryId

	GROUP BY category.CategoryId;



Assignment 3 :- 

/*
Display Shopper’s information along with number of orders he/she placed during last 30 days.
*/

1.	SELECT 
user.Name AS "Shopper Name" , 
user.Email AS "Email" , 
user.Phone AS "Phone" , 
COUNT(orders.ShopperId) AS "Total Order"

	FROM user RIGHT JOIN orders 
ON user.UserID = orders.ShopperId 

	WHERE orders.OrderDate > DATE_SUB(NOW(), INTERVAL 30 DAY)

	GROUP BY (orders.ShopperId);


/*
Display the top 10 Shoppers who generated maximum number of revenue in last 30 days.
*/
2.	
SELECT 
user.Name AS "Shopper Name", user.
Email AS "Email" , user.
Phone AS "Phone" ,
SUM(orders.OrderTotal) 
AS "Total Revenue"
	FROM user RIGHT JOIN orders 
ON user.UserID = orders.ShopperId 

	WHERE orders.OrderDate > DATE_SUB(NOW(), INTERVAL 30 DAY) 
GROUP BY (orders.ShopperId) DESC LIMIT 10;


/*
Display top 20 Products which are ordered most in last 60 days along with numbers.
*/
3. 
SELECT 
product.ProductName AS "Product Name" ,
 SUM(orderedproducts.Quantity) AS "Total Quantity Ordered" 
FROM orderedproducts 
	LEFT JOIN product ON orderedProducts.ProductId = product.ProductId 

	LEFT JOIN orders ON orderedProducts.OrderId = orders.OrderId 

	WHERE orders.OrderDate > DATE_SUB(NOW(), INTERVAL 60 DAY)

	GROUP BY (orderedProducts.ProductId) DESC LIMIT 20;


/*
Display Monthly sales revenue of the StoreFront for last 6 months. It should display each month’s sale.
*/

4. 
SELECT DATE_FORMAT(orders.OrderDate, "%m-%Y") 
	AS "Month",orders.OrderTotal AS "Monthly Sales"

	FROM orderedProducts LEFT JOIN orders ON orderedProducts.OrderId = orders.OrderId 

	LEFT JOIN orderstatus ON orderedproducts.OrderId = orderStatus.OrderId

	WHERE orderstatus.Status='Shipped' AND orders.OrderDate > DATE_SUB(NOW(), INTERVAL 6 Month)

	GROUP BY DATE_FORMAT(orders.Orderdate, "%m-%Y") DESC LIMIT 6;


/*
Mark the products as Inactive which are not ordered in last 90 days.
*/
5. 
SELECT product.ProductId, product.ProductName FROM product 
WHERE product.ProductId NOT IN (SELECT orderstatus.productId FROM orderstatus 

   WHERE orderstatus.OrderId IN (SELECT orders.OrderId FROM orders WHERE orders.OrderDate >= DATE_SUB(NOW(), INTERVAL 90 DAY)));



/*
Given a category search keyword, display all the Products present in this category/categories. 
*/

6. SELECT product.ProductId, product.ProductName 
FROM product 
   INNER JOIN categoryid ON product.ProductId = categoryid.ProductId
 
   INNER JOIN category ON categoryid.CategoryId = category.CategoryId 
WHERE category.CategoryName LIKE 'x%';

/*
Display top 10 Items which were cancelled most.
*/
7. SELECT product.ProductName , COUNT(orderstatus.Status) AS "No Of Time Cancel" 
	
   FROM
 product RIGHT JOIN orderstatus ON 
product.productId = orderstatus.ProductId 

	
   WHERE orderstatus.Status = 'Cancelled' 
GROUP BY (orderstatus.OrderId) 
DESC LIMIT 10;

Assignment 4 :- 

/*
Create appropriate tables and relationships for the same and write a SQL
         query for that returns a Resultset containing Zip Code, City Names and
         States ordered by State Name and City Name.
*/

1.	CREATE TABLE state (
 
	StateId int(11) AUTO_INCREMENT,
 
	StateName varchar(45) UNIQUE NOT NULL,
 
	PRIMARY KEY (StateId)
); 



	CREATE TABLE city (
 
	CityId int(11) AUTO_INCREMENT,
 
	CityName varchar(45) NOT NULL,
 
	ZipCode int(11) NOT NULL,
 
	StateId int(11) NOT NULL,
 
	PRIMARY KEY (CityId),
 
	KEY StateId (StateId),
 
	FOREIGN KEY (StateId) REFERENCES state (StateId)
) ;




	INSERT INTO state (StateName) 
	
	VALUES ('Rajasthan');


	
INSERT INTO state (StateName) 
	
	VALUES ('Goa');


	
INSERT INTO state (StateName) 
	
	VALUES ('Gujrat');


	
INSERT INTO state (StateName) 
	
	VALUES ('Uttarakhand');



	INSERT INTO state (StateName) 
	
	VALUES ('Laddakh');



	INSERT INTO city (cityName,zipcode,stateId) 
	
	VALUES ('Jaipur',302033,1);


	
INSERT INTO city (cityName,zipcode,stateId) 
	
	VALUES ('dfhhgd',302093,2);



	INSERT INTO city (cityName,zipcode,stateId) 
	
	VALUES ('kuljhgf',262033,3);


	
INSERT INTO city (cityName,zipcode,stateId) 
	
	VALUES ('asg',985464,4);



	INSERT INTO city (cityName,zipcode,stateId) 
	
	VALUES ('rgykj',226017,5);


	1. SELECT city.ZipCode AS "Zip Code", city.CityName AS "City Name" , state.StateName AS "State Name" 
	FROM city LEFT JOIN state ON city.StateId = state.StateId 
	ORDER BY state.StateName,city.CityName;


Assignment 5 :-

/*
Create a view displaying the order information (Id, Title, Price, Shopper’s name, Email, Orderdate, Status) with latest ordered items should be displayed first for last 60 days.
*/

1. 	CREATE VIEW OrderInformation 
	AS SELECT orderedproducts.OrderId AS "OrderId",product.ProductName AS "Title", product.Price AS "Price", 
	user.Name AS "ShopperName",user.Email AS "Email", orders.OrderDate AS "OrderDate", orderstatus.Status AS "Status" 
	from orderedproducts INNER JOIN product ON orderedproducts.ProductId = product.ProductId 
	INNER JOIN orderstatus ON orderedproducts.OrderId = orderstatus.OrderId 
	AND orderedproducts.ProductId = orderstatus.ProductId INNER JOIN orders ON orderedproducts.OrderId = orders.OrderId 
	INNER JOIN user ON orders.ShopperId = user.UserId  WHERE orders.OrderDate > Date_sub(NOW(), INTERVAL 60 DAY);

/*
Use the above view to display the Products(Items) which are in ‘shipped’ state.
*/

2. 	SELECT OrderInformation.OrderId, OrderInformation.Title,OrderInformation.ShopperName,OrderInformation.Email,OrderInformation.OrderDate,OrderInformation.Status 
	FROM OrderInformation WHERE OrderInformation.Status = "Shipped"; 

/*
Use the above view to display the top 5 most selling products.
*/

3. 	SELECT OrderInformation.Title, count(Title) AS "TotalSell" 
	FROM OrderInformation GROUP BY OrderInformation.Title 
	ORDER BY TotalSell DESC LIMIT 5;

