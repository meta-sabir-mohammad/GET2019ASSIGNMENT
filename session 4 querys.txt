Assignment 1 :-

/*
Create a function to calculate number of orders in a month. Month and year will be input parameter to function.
*/
1.
DELIMITER //
CREATE FUNCTION get_total_orders(month INT,year INT) RETURNS INT DETERMINISTIC 
BEGIN
DECLARE total_order INT;
SELECT COUNT(orders.OrderId) INTO total_order FROM orders WHERE MONTH(orders.OrderDate) = month AND YEAR(orders.OrderDate) = year;
RETURN total_order;
END
//

DELIMITER ;

SELECT GET_TOTAL_ORDERS(8,2019) AS 'Total Orders';

/*
Create a function to return month in a year having maximum orders. Year will be input parameter.
*/
2.
DELIMITER //
CREATE FUNCTION get_month_with_highest_orders(year INT) RETURNS INT DETERMINISTIC 
BEGIN
DECLARE month INT;
SELECT MONTH(orders.OrderDate) INTO MONTH FROM orders WHERE YEAR(orders.OrderDate) = year GROUP BY MONTH(orders.OrderDate) ORDER BY COUNT(orders.OrderId) DESC LIMIT 1;
RETURN month;
END
//

DELIMITER ;

SELECT GET_MONTH_WITH_HIGHEST_ORDERS(2019) AS 'Month';


Assignment 2 :-

/*
Create a Stored procedure to retrieve average sales of each product in a month. Month and year will be input parameter to function.
*/
1.
DELIMITER $$
CREATE PROCEDURE get_total_sell_of_products(IN month INT,IN year INT)
BEGIN
SELECT 
    product.ProductId AS 'Id',
    product.ProductName AS 'Name',
    SUM(orderedproducts.Quantity) AS 'Total Sell'
FROM
    product
        INNER JOIN
    orderedproducts ON product.ProductId = orderedproducts.ProductId
        INNER JOIN
    orders ON orderedproducts.OrderId = orders.OrderId
WHERE
    MONTH(orders.OrderDate) = month AND YEAR(orders.OrderDate) = year
GROUP BY product.ProductId;
END
$$

DELIMITER ;

CALL get_total_sell_of_products(8,2019);

/*
Create a stored procedure to retrieve table having order detail with status for a given period. 
Start date and end date will be input parameter. Put validation on input dates like start date is less than end date. 
If start date is greater than end date take first date of month as start date.
*/
2.
DELIMITER $$
CREATE PROCEDURE order_status (startdate DATE , enddate DATE)
   DETERMINISTIC
           BEGIN
IF(startdate > enddate ) 
THEN SET startdate = (DAY(startdate) = 01 AND MONTH(startdate) = MONTH(enddate) AND YEAR(startdate) = YEAR(enddate));
               END IF;
SELECT orderedproducts.OrderId AS 'Order Id' , orderedproducts.ProductId AS 'Product Id' , orderstatus.Status AS 'Status' , orders.OrderDate AS 'Date Of Order' 
FROM orderedproducts INNER JOIN orderstatus ON orderedproducts.OrderId = orderstatus.OrderId AND orderedproducts.ProductId = orderstatus.ProductId
INNER JOIN orders ON orderedProducts.OrderId = orders.OrderId
WHERE orders.OrderDate >= startdate AND orders.OrderDate <= enddate
ORDER BY (orderedproducts.OrderId);
           END
$$
DELIMITER ;

CALL order_status('2019-07-05','2019-08-21');


Assignment 3:-

CREATE INDEX productName ON product(productName);
CREATE INDEX parentCategoryId ON category(parentCategoryId);
CREATE INDEX ZipCode ON city(ZipCode);
CREATE INDEX OrderDate ON orders(OrderDate);
CREATE INDEX Status ON orderstatus(Status);
CREATE INDEX ShippingDate ON orderstatus(ShippingDate);
